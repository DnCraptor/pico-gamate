#pragma GCC optimize("Ofast")
#include <cstdio>
#include <cstring>
#include <hardware/flash.h>
#include <hardware/structs/vreg_and_chip_reset.h>
#include <pico/multicore.h>
#include <pico/stdlib.h>

extern "C" {
#include "m6502/m6502.h"
#include "hway/AY_PIO_595.h"
}
#include <graphics.h>
#include "audio.h"

#include "nespad.h"
#include "ff.h"
#include "ps2kbd_mrmltr.h"


#include "gamate/vdp.h"
#include "emu2149/emu2149.h"


#define HOME_DIR "\\GAMATE"
extern char __flash_binary_end;
#define FLASH_TARGET_OFFSET (((((uintptr_t)&__flash_binary_end - XIP_BASE) / FLASH_SECTOR_SIZE) + 4) * FLASH_SECTOR_SIZE)
static const uintptr_t rom = XIP_BASE + FLASH_TARGET_OFFSET;
PSG psg;

uint8_t * ROM = (uint8_t *) rom;
alignas(4) uint8_t RAM[1024] = { 0xFF };
alignas(4) uint8_t BIOS[4096] = { 0x4c, 0x01, 0xf3, 0x4c, 0xe0, 0xf2, 0x4c, 0xeb, 0xf2, 0x4c, 0xf6, 0xf2, 0x4c, 0x90, 0xf5, 0x4c,
                                  0x67, 0xfb, 0x4c, 0x1d, 0xf3, 0x4c, 0xc7, 0xf5, 0x4c, 0xae, 0xf3, 0x4c, 0xf7, 0xf4, 0x4c, 0x7b,
                                  0xf4, 0x4c, 0x4a, 0xf5, 0x4c, 0x1a, 0xf6, 0x4c, 0x2f, 0xf6, 0x4c, 0x00, 0xff, 0x4c, 0x09, 0xff,
                                  0x4c, 0x79, 0xfb, 0x4c, 0x42, 0xff, 0x4c, 0xa9, 0xfb, 0xa9, 0x00, 0x85, 0x16, 0x85, 0x17, 0x85,
                                  0x15, 0xa5, 0x16, 0x8d, 0x02, 0x50, 0xa5, 0x17, 0x8d, 0x03, 0x50, 0x20, 0x90, 0xf5, 0xa9, 0xb8,
                                  0x85, 0x00, 0x85, 0x02, 0xa9, 0xf1, 0x85, 0x01, 0x85, 0x03, 0xa9, 0x58, 0x85, 0x1c, 0xa9, 0x10,
                                  0x85, 0x1d, 0xa2, 0x20, 0xa0, 0x90, 0x20, 0xc7, 0xf5, 0xa0, 0x00, 0x20, 0xeb, 0xf2, 0x8c, 0x03,
                                  0x50, 0xc8, 0xc0, 0x60, 0x90, 0xf5, 0x20, 0xf6, 0xf2, 0xa9, 0x06, 0x85, 0x21, 0xa9, 0x10, 0x85,
                                  0x00, 0x85, 0x02, 0xa9, 0xf1, 0x85, 0x01, 0x85, 0x03, 0xa9, 0x38, 0x85, 0x1c, 0xa9, 0x18, 0x85,
                                  0x1d, 0xa2, 0x30, 0xa0, 0xa4, 0x20, 0xc7, 0xf5, 0xa9, 0x68, 0x85, 0x00, 0x85, 0x02, 0xa9, 0xf2,
                                  0x85, 0x01, 0x85, 0x03, 0xa9, 0x08, 0x85, 0x1c, 0xa9, 0x08, 0x85, 0x1d, 0xa2, 0x68, 0xa0, 0xb4,
                                  0x20, 0xc7, 0xf5, 0xa9, 0x70, 0x85, 0x00, 0x85, 0x02, 0xa9, 0xf2, 0x85, 0x01, 0x85, 0x03, 0xa9,
                                  0x50, 0x85, 0x1c, 0xa9, 0x08, 0x85, 0x1d, 0xa2, 0x28, 0xa0, 0xbe, 0x20, 0xc7, 0xf5, 0xc6, 0x21,
                                  0xf0, 0x2b, 0x20, 0xf6, 0xf2, 0xa9, 0x58, 0x85, 0x1c, 0xa9, 0x28, 0x85, 0x1d, 0xa2, 0x20, 0xa0,
                                  0xa4, 0xa9, 0x00, 0x20, 0x00, 0xff, 0xa9, 0x58, 0x85, 0x1c, 0xa9, 0x28, 0x85, 0x1d, 0xa2, 0x20,
                                  0xa0, 0xa4, 0xa9, 0x00, 0x20, 0x09, 0xff, 0x20, 0xf6, 0xf2, 0x4c, 0x7d, 0xf0, 0xa0, 0x06, 0x20,
                                  0xf6, 0xf2, 0x88, 0x10, 0xfa, 0xa9, 0x01, 0x85, 0x0c, 0xa9, 0xff, 0x85, 0x0a, 0x4c, 0x20, 0x60,
                                  0x00, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f,
                                  0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0x00, 0xff, 0x80, 0xff, 0x80, 0x87, 0x80, 0x83,
                                  0x80, 0x87, 0x80, 0xff, 0x80, 0xff, 0x80, 0x87, 0x80, 0x83, 0x80, 0x87, 0x80, 0xff, 0x80, 0xff,
                                  0x00, 0x81, 0x01, 0xe1, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xc0, 0x00, 0xf0, 0x00, 0xf8,
                                  0x00, 0xf8, 0x00, 0xf8, 0x00, 0xf3, 0x03, 0xc3, 0x00, 0xff, 0xf8, 0xff, 0x78, 0x7f, 0x78, 0x7f,
                                  0x78, 0x7f, 0x78, 0x7f, 0x78, 0x7f, 0x78, 0x7f, 0x78, 0x7f, 0x78, 0x7f, 0x78, 0xff, 0xf8, 0xff,
                                  0x00, 0xe7, 0x07, 0xe7, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80,
                                  0x00, 0x80, 0x00, 0x80, 0x00, 0xf0, 0x00, 0xf0, 0x00, 0xff, 0xfc, 0xff, 0x3c, 0x3f, 0x3c, 0x3f,
                                  0x3c, 0x3f, 0x3c, 0x3f, 0x3c, 0x3f, 0x3c, 0x3f, 0x3c, 0x3f, 0x3c, 0x3f, 0x3c, 0x3f, 0x3c, 0x3f,
                                  0x00, 0xff, 0x00, 0xff, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0,
                                  0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x07, 0x1c, 0x38, 0x70, 0x70,
                                  0xe0, 0xe0, 0xe0, 0xe0, 0x70, 0x70, 0x3e, 0x1f, 0x00, 0x00, 0x00, 0xe8, 0x38, 0x18, 0x08, 0x00,
                                  0x00, 0x00, 0x7c, 0x38, 0x38, 0x38, 0xf9, 0xbb, 0x00, 0x00, 0x00, 0x03, 0x03, 0x07, 0x0d, 0x09,
                                  0x19, 0x30, 0x3f, 0x60, 0xc0, 0xc0, 0x80, 0xc1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x80, 0x81, 0x81,
                                  0xc1, 0xc1, 0xc1, 0xc3, 0xc2, 0xe2, 0xe2, 0xf7, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xe0, 0xe0, 0x60,
                                  0x61, 0x71, 0x33, 0x34, 0x34, 0x3c, 0x18, 0x18, 0x00, 0x00, 0x00, 0x38, 0x70, 0x70, 0xf0, 0xb0,
                                  0xb0, 0x30, 0x70, 0x70, 0x61, 0x61, 0xe3, 0xf7, 0x00, 0x00, 0x00, 0x06, 0x06, 0x0f, 0x1b, 0x13,
                                  0x33, 0x61, 0x7f, 0xc1, 0x81, 0x81, 0x01, 0x83, 0x00, 0x00, 0x00, 0x1f, 0x31, 0x63, 0x03, 0x03,
                                  0x83, 0x83, 0x87, 0x87, 0x86, 0xc6, 0xc6, 0xef, 0x00, 0x00, 0x00, 0xfb, 0x99, 0x89, 0x81, 0x01,
                                  0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x00, 0x00, 0x00, 0xff, 0xc3, 0xc0, 0x84, 0x84,
                                  0x8c, 0xf8, 0x88, 0x00, 0x03, 0x06, 0x06, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00,
                                  0x00, 0x00, 0x00, 0xf1, 0x5b, 0x5f, 0x55, 0x51, 0x3c, 0x42, 0xb9, 0xa5, 0xb9, 0xa5, 0x42, 0x3c,
                                  0x00, 0x38, 0x44, 0xba, 0xa2, 0xba, 0x44, 0x38, 0x00, 0x00, 0xf8, 0xcc, 0xf8, 0xcc, 0xcc, 0xf8,
                                  0x00, 0x00, 0x78, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00, 0x00, 0xfc, 0x30, 0x30, 0x30, 0x30, 0x30,
                                  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xcc, 0xc0, 0xc0, 0xcc, 0x78,
                                  0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xd0, 0xcc,
                                  0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xf8, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30,
                                  0x00, 0x38, 0x44, 0xba, 0xa2, 0xba, 0x44, 0x38, 0x3f, 0x19, 0x19, 0x1f, 0x19, 0x19, 0x19, 0x3f,
                                  0x3e, 0x9c, 0x9c, 0x1c, 0x9c, 0x9c, 0x9c, 0x3e, 0xfe, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38,
                                  0xa5, 0x0b, 0xc9, 0x08, 0x90, 0xfa, 0xa9, 0x00, 0x85, 0x0b, 0x60, 0xa5, 0x0b, 0xc9, 0x05, 0x90,
                                  0xfa, 0xa9, 0x00, 0x85, 0x0b, 0x60, 0xa5, 0x0b, 0xc9, 0x18, 0x90, 0xfa, 0xa9, 0x00, 0x85, 0x0b,
                                  0x60, 0xa9, 0xc0, 0x85, 0x00, 0x85, 0x02, 0xa9, 0xf2, 0x85, 0x01, 0x85, 0x03, 0xa9, 0x20, 0x85,
                                  0x1c, 0xa9, 0x08, 0x85, 0x1d, 0xa2, 0x40, 0xa0, 0x8c, 0x20, 0xc7, 0xf5, 0x60, 0x8a, 0x4a, 0x4a,
                                  0x4a, 0x09, 0x80, 0x85, 0x18, 0x84, 0x19, 0xa0, 0x00, 0xb1, 0x00, 0x85, 0x1b, 0xc8, 0xb1, 0x00,
                                  0x20, 0x3a, 0xf3, 0xe6, 0x18, 0xc6, 0x1b, 0xd0, 0xf4, 0x60, 0x85, 0x1a, 0x98, 0x48, 0xa9, 0x40,
                                  0x05, 0x15, 0x8d, 0x01, 0x50, 0xa5, 0x18, 0x8d, 0x04, 0x50, 0xa5, 0x19, 0x8d, 0x05, 0x50, 0xa5,
                                  0x1a, 0xc9, 0x61, 0xb0, 0x41, 0xc9, 0x41, 0xb0, 0x25, 0xa2, 0x00, 0xc9, 0x20, 0xf0, 0x0e, 0xb0,
                                  0x05, 0xa2, 0x00, 0x4c, 0x6d, 0xf3, 0x38, 0xe9, 0x2f, 0x0a, 0x0a, 0x0a, 0xaa, 0x86, 0x1a, 0xa0,
                                  0x07, 0xbd, 0x29, 0x60, 0x8d, 0x07, 0x50, 0xe8, 0x88, 0x10, 0xf6, 0x4c, 0xab, 0xf3, 0x38, 0xe9,
                                  0x41, 0x0a, 0x0a, 0x0a, 0xaa, 0x86, 0x1a, 0xa0, 0x07, 0xbd, 0x81, 0x60, 0x8d, 0x07, 0x50, 0xe8,
                                  0x88, 0x10, 0xf6, 0x4c, 0xab, 0xf3, 0x38, 0xe9, 0x61, 0x0a, 0x0a, 0x0a, 0xaa, 0x86, 0x1a, 0xa0,
                                  0x07, 0xbd, 0x51, 0x61, 0x8d, 0x07, 0x50, 0xe8, 0x88, 0x10, 0xf6, 0x68, 0xa8, 0x60, 0xa5, 0x00,
                                  0x48, 0xa5, 0x01, 0x48, 0xa9, 0x40, 0x05, 0x15, 0x8d, 0x01, 0x50, 0xa0, 0x00, 0xb1, 0x00, 0xc9,
                                  0xfe, 0xd0, 0x03, 0x4c, 0xf2, 0xf3, 0x85, 0x19, 0xa9, 0x00, 0x85, 0x18, 0x20, 0x75, 0xf4, 0xb1,
                                  0x00, 0xc9, 0xff, 0xf0, 0x17, 0x85, 0x1a, 0x20, 0x75, 0xf4, 0xb1, 0x00, 0x85, 0x1b, 0xa5, 0x06,
                                  0x85, 0x02, 0xa5, 0x07, 0x85, 0x03, 0x20, 0x30, 0xf4, 0x4c, 0xcc, 0xf3, 0x20, 0x75, 0xf4, 0x4c,
                                  0xbd, 0xf3, 0x68, 0x85, 0x01, 0x68, 0x85, 0x00, 0xa0, 0x00, 0xb1, 0x00, 0xc9, 0xfe, 0xd0, 0x03,
                                  0x4c, 0x2f, 0xf4, 0x85, 0x19, 0xa9, 0x80, 0x85, 0x18, 0x20, 0x75, 0xf4, 0xb1, 0x00, 0xc9, 0xff,
                                  0xf0, 0x17, 0x85, 0x1a, 0x20, 0x75, 0xf4, 0xb1, 0x00, 0x85, 0x1b, 0xa5, 0x08, 0x85, 0x02, 0xa5,
                                  0x09, 0x85, 0x03, 0x20, 0x30, 0xf4, 0x4c, 0x09, 0xf4, 0x20, 0x75, 0xf4, 0x4c, 0xfa, 0xf3, 0x60,
                                  0x48, 0x98, 0x48, 0xa5, 0x1a, 0xd0, 0x0a, 0xa5, 0x18, 0x18, 0x65, 0x1b, 0x85, 0x18, 0x4c, 0x71,
                                  0xf4, 0xc9, 0x20, 0x90, 0x07, 0xe6, 0x03, 0x38, 0xe9, 0x20, 0xb0, 0xf5, 0x0a, 0x0a, 0x0a, 0x85,
                                  0x1a, 0xa5, 0x18, 0x8d, 0x04, 0x50, 0xa5, 0x19, 0x0a, 0x0a, 0x0a, 0x8d, 0x05, 0x50, 0xa4, 0x1a,
                                  0xa2, 0x07, 0xb1, 0x02, 0x8d, 0x07, 0x50, 0xc8, 0xca, 0x10, 0xf7, 0xe6, 0x18, 0xc6, 0x1b, 0xd0,
                                  0xe0, 0x68, 0xa8, 0x68, 0x60, 0xc8, 0xd0, 0x02, 0xe6, 0x01, 0x60, 0xa5, 0x00, 0x48, 0xa5, 0x01,
                                  0x48, 0xa9, 0x40, 0x05, 0x15, 0x8d, 0x01, 0x50, 0xa0, 0x00, 0xb1, 0x00, 0xc9, 0xfe, 0xd0, 0x03,
                                  0x4c, 0xbc, 0xf4, 0x85, 0x19, 0xa9, 0x00, 0x85, 0x18, 0x20, 0x75, 0xf4, 0xb1, 0x00, 0xc9, 0xff,
                                  0xf0, 0x14, 0x85, 0x1a, 0xa9, 0x01, 0x85, 0x1b, 0xa5, 0x06, 0x85, 0x02, 0xa5, 0x07, 0x85, 0x03,
                                  0x20, 0x30, 0xf4, 0x4c, 0x99, 0xf4, 0x20, 0x75, 0xf4, 0x4c, 0x8a, 0xf4, 0x68, 0x85, 0x01, 0x68,
                                  0x85, 0x00, 0xa0, 0x00, 0xb1, 0x00, 0xc9, 0xfe, 0xd0, 0x03, 0x4c, 0xf6, 0xf4, 0x85, 0x19, 0xa9,
                                  0x80, 0x85, 0x18, 0x20, 0x75, 0xf4, 0xb1, 0x00, 0xc9, 0xff, 0xf0, 0x14, 0x85, 0x1a, 0xa9, 0x01,
                                  0x85, 0x1b, 0xa5, 0x08, 0x85, 0x02, 0xa5, 0x09, 0x85, 0x03, 0x20, 0x30, 0xf4, 0x4c, 0xd3, 0xf4,
                                  0x20, 0x75, 0xf4, 0x4c, 0xc4, 0xf4, 0x60, 0xa9, 0x00, 0x05, 0x15, 0x8d, 0x01, 0x50, 0xa0, 0xe6,
                                  0x8c, 0x05, 0x50, 0xa9, 0x00, 0xa2, 0x20, 0x8d, 0x04, 0x50, 0x8d, 0x07, 0x50, 0xca, 0xd0, 0xfa,
                                  0xc8, 0xc0, 0xff, 0xd0, 0xeb, 0xa0, 0x00, 0xb1, 0x00, 0xc9, 0xfe, 0xf0, 0x2c, 0x18, 0x69, 0xe6,
                                  0x8d, 0x05, 0x50, 0xa9, 0x00, 0x8d, 0x04, 0x50, 0x20, 0x75, 0xf4, 0xb1, 0x00, 0xc9, 0xff, 0xf0,
                                  0x13, 0x85, 0x1a, 0x20, 0x75, 0xf4, 0xb1, 0x00, 0xaa, 0xa5, 0x1a, 0x8d, 0x07, 0x50, 0xca, 0xd0,
                                  0xfa, 0x4c, 0x28, 0xf5, 0x20, 0x75, 0xf4, 0xd0, 0xce, 0x60, 0xa9, 0x00, 0x05, 0x15, 0x8d, 0x01,
                                  0x50, 0xa0, 0xe6, 0x8c, 0x05, 0x50, 0xa9, 0x00, 0xa2, 0x20, 0x8d, 0x04, 0x50, 0x8d, 0x07, 0x50,
                                  0xca, 0xd0, 0xfa, 0xc8, 0xc0, 0xff, 0xd0, 0xeb, 0xa0, 0x00, 0xb1, 0x00, 0xc9, 0xfe, 0xf0, 0x1f,
                                  0x18, 0x69, 0xe6, 0x8d, 0x05, 0x50, 0xa9, 0x00, 0x8d, 0x04, 0x50, 0x20, 0x75, 0xf4, 0xb1, 0x00,
                                  0xc9, 0xff, 0xf0, 0x06, 0x8d, 0x07, 0x50, 0x4c, 0x7b, 0xf5, 0x20, 0x75, 0xf4, 0xd0, 0xdb, 0x60,
                                  0xa9, 0x80, 0x05, 0x15, 0x8d, 0x01, 0x50, 0xa9, 0x00, 0x85, 0x1e, 0x20, 0xad, 0xf5, 0xa9, 0x80,
                                  0x85, 0x1e, 0x20, 0xad, 0xf5, 0xa9, 0x40, 0x05, 0x15, 0x8d, 0x01, 0x50, 0x60, 0xa0, 0x00, 0xa5,
                                  0x1e, 0x8d, 0x04, 0x50, 0x8c, 0x05, 0x50, 0xa2, 0x20, 0xa9, 0x00, 0x8d, 0x07, 0x50, 0xca, 0xd0,
                                  0xfa, 0xc8, 0xc0, 0xc8, 0xd0, 0xe9, 0x60, 0x86, 0x18, 0x84, 0x19, 0x46, 0x18, 0x46, 0x18, 0x46,
                                  0x18, 0xa5, 0x18, 0x48, 0xa9, 0x40, 0x05, 0x15, 0x8d, 0x01, 0x50, 0x46, 0x1c, 0x46, 0x1c, 0x46,
                                  0x1c, 0x20, 0xf5, 0xf5, 0xa5, 0x02, 0x85, 0x00, 0xa5, 0x03, 0x85, 0x01, 0x68, 0x09, 0x80, 0x85,
                                  0x18, 0x20, 0xf5, 0xf5, 0x60, 0xa5, 0x1c, 0x85, 0x1e, 0xa0, 0x00, 0xa5, 0x18, 0x8d, 0x04, 0x50,
                                  0xa5, 0x19, 0x8d, 0x05, 0x50, 0xa5, 0x1d, 0x85, 0x1f, 0xb1, 0x00, 0x8d, 0x07, 0x50, 0xc8, 0xc6,
                                  0x1f, 0xd0, 0xf6, 0xe6, 0x18, 0xc6, 0x1e, 0xd0, 0xe2, 0x60, 0xa2, 0x10, 0xa0, 0x00, 0xa9, 0xff,
                                  0x99, 0x23, 0x00, 0x99, 0x28, 0x00, 0x98, 0x18, 0x69, 0x08, 0xa8, 0xca, 0xd0, 0xf0, 0x60, 0x48,
                                  0x98, 0x48, 0x8a, 0x48, 0xa2, 0x08, 0xa0, 0x00, 0xb9, 0x28, 0x00, 0xc9, 0xff, 0xf0, 0x19, 0xb9,
                                  0x26, 0x00, 0x4a, 0x4a, 0x4a, 0x85, 0x18, 0x85, 0x1e, 0xb9, 0x27, 0x00, 0x29, 0xf8, 0x85, 0x19,
                                  0x4a, 0x4a, 0x4a, 0x85, 0x1f, 0x20, 0xc4, 0xf6, 0x98, 0x18, 0x69, 0x08, 0xa8, 0xca, 0xd0, 0xd8,
                                  0xa2, 0x08, 0xa0, 0x00, 0xb9, 0x68, 0x00, 0xc9, 0xff, 0xf0, 0x19, 0xb9, 0x66, 0x00, 0x4a, 0x4a,
                                  0x4a, 0x85, 0x18, 0x85, 0x1e, 0xb9, 0x67, 0x00, 0x29, 0xf8, 0x85, 0x19, 0x4a, 0x4a, 0x4a, 0x85,
                                  0x1f, 0x20, 0x9d, 0xf9, 0x98, 0x18, 0x69, 0x08, 0xa8, 0xca, 0xd0, 0xd8, 0xa2, 0x08, 0xa0, 0x00,
                                  0x8a, 0x48, 0xa2, 0x00, 0xb9, 0x21, 0x00, 0x9d, 0x00, 0x03, 0xc8, 0xe8, 0xe0, 0x08, 0xd0, 0xf4,
                                  0x68, 0xaa, 0xad, 0x02, 0x03, 0xc9, 0xff, 0xf0, 0x0f, 0x20, 0x88, 0xf7, 0x20, 0xed, 0xf7, 0x20,
                                  0xa1, 0xf8, 0x20, 0xce, 0xf8, 0x20, 0xfa, 0xf8, 0xca, 0xd0, 0xd5, 0x20, 0x63, 0xf9, 0x68, 0xaa,
                                  0x68, 0xa8, 0x68, 0x60, 0x98, 0x48, 0x8a, 0x48, 0xa9, 0x40, 0x05, 0x15, 0x8d, 0x01, 0x50, 0xa5,
                                  0x1f, 0x18, 0x69, 0xe6, 0x85, 0x1f, 0xa0, 0x00, 0xa9, 0x03, 0x85, 0x1b, 0xa6, 0x1e, 0xa5, 0x1f,
                                  0x85, 0x1d, 0x8d, 0x05, 0x50, 0x8e, 0x04, 0x50, 0xad, 0x06, 0x50, 0x99, 0x08, 0x03, 0xe6, 0x1d,
                                  0xa5, 0x1d, 0x8d, 0x05, 0x50, 0x8e, 0x04, 0x50, 0xad, 0x06, 0x50, 0x99, 0x09, 0x03, 0xe6, 0x1d,
                                  0xa5, 0x1d, 0x8d, 0x05, 0x50, 0x8e, 0x04, 0x50, 0xad, 0x06, 0x50, 0x99, 0x0a, 0x03, 0xc8, 0xc8,
                                  0xc8, 0xe8, 0xc6, 0x1b, 0xd0, 0xc8, 0xa0, 0x00, 0xa9, 0x03, 0x85, 0x1c, 0xa6, 0x18, 0xa9, 0x03,
                                  0x85, 0x1d, 0x8e, 0x04, 0x50, 0xa5, 0x19, 0x8d, 0x05, 0x50, 0xb9, 0x08, 0x03, 0x20, 0x4b, 0xf7,
                                  0xc8, 0xc6, 0x1d, 0xd0, 0xf5, 0xe8, 0xc6, 0x1c, 0xd0, 0xe4, 0xa5, 0x18, 0xc9, 0x80, 0xb0, 0x06,
                                  0x09, 0x80, 0x85, 0x18, 0xd0, 0xd0, 0x68, 0xaa, 0x68, 0xa8, 0x60, 0x85, 0x1a, 0x8a, 0x48, 0x98,
                                  0x48, 0xa5, 0x06, 0x85, 0x02, 0xa5, 0x07, 0x85, 0x03, 0xa6, 0x18, 0xe0, 0x80, 0x90, 0x08, 0xa5,
                                  0x08, 0x85, 0x02, 0xa5, 0x09, 0x85, 0x03, 0xa5, 0x1a, 0xc9, 0x20, 0x90, 0x07, 0xe6, 0x03, 0x38,
                                  0xe9, 0x20, 0xb0, 0xf5, 0x0a, 0x0a, 0x0a, 0xa8, 0xa2, 0x08, 0xb1, 0x02, 0x8d, 0x07, 0x50, 0xc8,
                                  0xca, 0xd0, 0xf7, 0x68, 0xa8, 0x68, 0xaa, 0x60, 0x48, 0x8a, 0x48, 0x98, 0x48, 0xa9, 0x40, 0x05,
                                  0x15, 0x8d, 0x01, 0x50, 0xad, 0x00, 0x03, 0x4a, 0x4a, 0x4a, 0x85, 0x18, 0xad, 0x01, 0x03, 0x85,
                                  0x19, 0xa9, 0x08, 0x85, 0x00, 0xa9, 0x03, 0x85, 0x01, 0xa6, 0x18, 0xa0, 0x00, 0xa5, 0x19, 0x85,
                                  0x1b, 0xa5, 0x1b, 0x8d, 0x05, 0x50, 0x8e, 0x04, 0x50, 0xad, 0x06, 0x50, 0x91, 0x00, 0xe6, 0x1b,
                                  0xc8, 0xc0, 0x30, 0xf0, 0x0c, 0xc0, 0x20, 0xf0, 0x04, 0xc0, 0x10, 0xd0, 0xe4, 0xe8, 0x4c, 0xad,
                                  0xf7, 0xa5, 0x18, 0xaa, 0xc9, 0x80, 0xb0, 0x0f, 0xa9, 0x38, 0x85, 0x00, 0xa9, 0x03, 0x85, 0x01,
                                  0x8a, 0x09, 0x80, 0x85, 0x18, 0xd0, 0xc2, 0x68, 0xa8, 0x68, 0xaa, 0x68, 0x60, 0x48, 0x8a, 0x48,
                                  0x98, 0x48, 0xa9, 0x40, 0x05, 0x15, 0x8d, 0x01, 0x50, 0xa9, 0x68, 0x85, 0x00, 0xa9, 0x03, 0x85,
                                  0x01, 0xa9, 0x00, 0x85, 0x1b, 0xad, 0x02, 0x03, 0xa8, 0x20, 0x4e, 0xf8, 0x20, 0x95, 0xf8, 0x98,
                                  0x18, 0x69, 0x02, 0x20, 0x4e, 0xf8, 0x20, 0x95, 0xf8, 0x98, 0x18, 0x69, 0x01, 0x20, 0x4e, 0xf8,
                                  0x20, 0x95, 0xf8, 0x98, 0x18, 0x69, 0x03, 0x20, 0x4e, 0xf8, 0xa5, 0x1b, 0xd0, 0x0d, 0xe6, 0x1b,
                                  0xa9, 0x98, 0x85, 0x00, 0xa9, 0x03, 0x85, 0x01, 0x4c, 0x05, 0xf8, 0xa0, 0x0f, 0xa9, 0x00, 0x99,
                                  0x88, 0x03, 0x99, 0xb8, 0x03, 0x88, 0x10, 0xf7, 0x68, 0xa8, 0x68, 0xaa, 0x68, 0x60, 0x85, 0x1a,
                                  0x8a, 0x48, 0x98, 0x48, 0xa5, 0x06, 0x85, 0x02, 0xa5, 0x07, 0x85, 0x03, 0xa5, 0x1b, 0xf0, 0x08,
                                  0xa5, 0x08, 0x85, 0x02, 0xa5, 0x09, 0x85, 0x03, 0xa5, 0x1a, 0xc9, 0x20, 0x90, 0x07, 0xe6, 0x03,
                                  0x38, 0xe9, 0x20, 0xb0, 0xf5, 0x0a, 0x0a, 0x0a, 0xa8, 0xa5, 0x00, 0x48, 0xa2, 0x08, 0x86, 0x1c,
                                  0xa2, 0x00, 0xb1, 0x02, 0x81, 0x00, 0xc8, 0xe6, 0x00, 0xc6, 0x1c, 0xd0, 0xf5, 0x68, 0x85, 0x00,
                                  0x68, 0xa8, 0x68, 0xaa, 0x60, 0xa5, 0x00, 0x18, 0x69, 0x08, 0x85, 0x00, 0x90, 0x02, 0xe6, 0x01,
                                  0x60, 0x48, 0x8a, 0x48, 0x98, 0x48, 0xad, 0x00, 0x03, 0x29, 0x07, 0xf0, 0x1b, 0xa8, 0xa2, 0x0f,
                                  0x5e, 0x68, 0x03, 0x7e, 0x78, 0x03, 0x7e, 0x88, 0x03, 0x5e, 0x98, 0x03, 0x7e, 0xa8, 0x03, 0x7e,
                                  0xb8, 0x03, 0xca, 0x10, 0xeb, 0x88, 0xd0, 0xe6, 0x68, 0xa8, 0x68, 0xaa, 0x68, 0x60, 0x48, 0x8a,
                                  0x48, 0x98, 0x48, 0xa2, 0x2f, 0xbd, 0x68, 0x03, 0x1d, 0x98, 0x03, 0x49, 0xff, 0xa8, 0x3d, 0x08,
                                  0x03, 0x1d, 0x68, 0x03, 0x9d, 0x68, 0x03, 0x98, 0x3d, 0x38, 0x03, 0x1d, 0x98, 0x03, 0x9d, 0x98,
                                  0x03, 0xca, 0x10, 0xe1, 0x68, 0xa8, 0x68, 0xaa, 0x68, 0x60, 0x48, 0x8a, 0x48, 0x98, 0x48, 0xa9,
                                  0x40, 0x05, 0x15, 0x8d, 0x01, 0x50, 0xad, 0x00, 0x03, 0x4a, 0x4a, 0x4a, 0x85, 0x18, 0xaa, 0xad,
                                  0x01, 0x03, 0x85, 0x19, 0xa0, 0x00, 0xa5, 0x19, 0x8d, 0x05, 0x50, 0x8e, 0x04, 0x50, 0xb9, 0x68,
                                  0x03, 0x8d, 0x07, 0x50, 0xc8, 0xc0, 0x30, 0xf0, 0x0c, 0xc0, 0x20, 0xf0, 0x04, 0xc0, 0x10, 0xd0,
                                  0xed, 0xe8, 0x4c, 0x16, 0xf9, 0xa5, 0x18, 0x09, 0x80, 0x85, 0x18, 0xaa, 0xa0, 0x00, 0xa5, 0x19,
                                  0x8d, 0x05, 0x50, 0x8e, 0x04, 0x50, 0xb9, 0x98, 0x03, 0x8d, 0x07, 0x50, 0xc8, 0xc0, 0x30, 0xf0,
                                  0x0c, 0xc0, 0x20, 0xf0, 0x04, 0xc0, 0x10, 0xd0, 0xed, 0xe8, 0x4c, 0x3e, 0xf9, 0x68, 0xa8, 0x68,
                                  0xaa, 0x68, 0x60, 0x48, 0x98, 0x48, 0x8a, 0x48, 0xa2, 0x08, 0xa0, 0x00, 0x8a, 0x48, 0xa2, 0x00,
                                  0xb9, 0x61, 0x00, 0x9d, 0x00, 0x03, 0xc8, 0xe8, 0xe0, 0x08, 0xd0, 0xf4, 0x68, 0xaa, 0xad, 0x02,
                                  0x03, 0xc9, 0xff, 0xf0, 0x0f, 0x20, 0x13, 0xfa, 0x20, 0x74, 0xfa, 0x20, 0xb3, 0xfa, 0x20, 0xda,
                                  0xfa, 0x20, 0x06, 0xfb, 0xca, 0xd0, 0xd5, 0x68, 0xaa, 0x68, 0xa8, 0x68, 0x60, 0x98, 0x48, 0x8a,
                                  0x48, 0xa9, 0x40, 0x05, 0x15, 0x8d, 0x01, 0x50, 0xa5, 0x1f, 0x18, 0x69, 0xe6, 0x85, 0x1f, 0xa0,
                                  0x00, 0xa9, 0x02, 0x85, 0x1b, 0xa6, 0x1e, 0xa5, 0x1f, 0x85, 0x1d, 0x8d, 0x05, 0x50, 0x8e, 0x04,
                                  0x50, 0xad, 0x06, 0x50, 0x99, 0x08, 0x03, 0xe6, 0x1d, 0xa5, 0x1d, 0x8d, 0x05, 0x50, 0x8e, 0x04,
                                  0x50, 0xad, 0x06, 0x50, 0x99, 0x09, 0x03, 0xc8, 0xc8, 0xe8, 0xc6, 0x1b, 0xd0, 0xd9, 0xa0, 0x00,
                                  0xa9, 0x02, 0x85, 0x1c, 0xa6, 0x18, 0xa9, 0x02, 0x85, 0x1d, 0x8e, 0x04, 0x50, 0xa5, 0x19, 0x8d,
                                  0x05, 0x50, 0xb9, 0x08, 0x03, 0x20, 0x4b, 0xf7, 0xc8, 0xc6, 0x1d, 0xd0, 0xf5, 0xe8, 0xc6, 0x1c,
                                  0xd0, 0xe4, 0xa5, 0x18, 0xc9, 0x80, 0xb0, 0x06, 0x09, 0x80, 0x85, 0x18, 0xd0, 0xd0, 0x68, 0xaa,
                                  0x68, 0xa8, 0x60, 0x48, 0x8a, 0x48, 0x98, 0x48, 0xa9, 0x40, 0x05, 0x15, 0x8d, 0x01, 0x50, 0xad,
                                  0x00, 0x03, 0x4a, 0x4a, 0x4a, 0x85, 0x18, 0xad, 0x01, 0x03, 0x85, 0x19, 0xa9, 0x08, 0x85, 0x00,
                                  0xa9, 0x03, 0x85, 0x01, 0xa6, 0x18, 0xa0, 0x00, 0xa5, 0x19, 0x85, 0x1b, 0xa5, 0x1b, 0x8d, 0x05,
                                  0x50, 0x8e, 0x04, 0x50, 0xad, 0x06, 0x50, 0x91, 0x00, 0xe6, 0x1b, 0xc8, 0xc0, 0x10, 0xf0, 0x08,
                                  0xc0, 0x08, 0xd0, 0xe8, 0xe8, 0x4c, 0x38, 0xfa, 0xa5, 0x18, 0xaa, 0xc9, 0x80, 0xb0, 0x0f, 0xa9,
                                  0x38, 0x85, 0x00, 0xa9, 0x03, 0x85, 0x01, 0x8a, 0x09, 0x80, 0x85, 0x18, 0xd0, 0xc6, 0x68, 0xa8,
                                  0x68, 0xaa, 0x68, 0x60, 0x48, 0x8a, 0x48, 0x98, 0x48, 0xa9, 0x68, 0x85, 0x00, 0xa9, 0x03, 0x85,
                                  0x01, 0xa9, 0x00, 0x85, 0x1b, 0xad, 0x02, 0x03, 0xa8, 0x20, 0x4e, 0xf8, 0x20, 0x95, 0xf8, 0xa5,
                                  0x1b, 0xd0, 0x0d, 0xe6, 0x1b, 0xa9, 0x98, 0x85, 0x00, 0xa9, 0x03, 0x85, 0x01, 0x4c, 0x85, 0xfa,
                                  0xa0, 0x07, 0xa9, 0x00, 0x99, 0x70, 0x03, 0x99, 0xa0, 0x03, 0x88, 0x10, 0xf7, 0x68, 0xa8, 0x68,
                                  0xaa, 0x68, 0x60, 0x48, 0x8a, 0x48, 0x98, 0x48, 0xad, 0x00, 0x03, 0x29, 0x07, 0xf0, 0x15, 0xa8,
                                  0xa2, 0x07, 0x5e, 0x68, 0x03, 0x7e, 0x70, 0x03, 0x5e, 0x98, 0x03, 0x7e, 0xa0, 0x03, 0xca, 0x10,
                                  0xf1, 0x88, 0xd0, 0xec, 0x68, 0xa8, 0x68, 0xaa, 0x68, 0x60, 0x48, 0x8a, 0x48, 0x98, 0x48, 0xa2,
                                  0x0f, 0xbd, 0x68, 0x03, 0x1d, 0x98, 0x03, 0x49, 0xff, 0xa8, 0x3d, 0x08, 0x03, 0x1d, 0x68, 0x03,
                                  0x9d, 0x68, 0x03, 0x98, 0x3d, 0x38, 0x03, 0x1d, 0x98, 0x03, 0x9d, 0x98, 0x03, 0xca, 0x10, 0xe1,
                                  0x68, 0xa8, 0x68, 0xaa, 0x68, 0x60, 0x48, 0x8a, 0x48, 0x98, 0x48, 0xa9, 0x40, 0x05, 0x15, 0x8d,
                                  0x01, 0x50, 0xad, 0x00, 0x03, 0x4a, 0x4a, 0x4a, 0x85, 0x18, 0xaa, 0xad, 0x01, 0x03, 0x85, 0x19,
                                  0xa0, 0x00, 0xa5, 0x19, 0x8d, 0x05, 0x50, 0x8e, 0x04, 0x50, 0xb9, 0x68, 0x03, 0x8d, 0x07, 0x50,
                                  0xc8, 0xc0, 0x10, 0xf0, 0x08, 0xc0, 0x08, 0xd0, 0xf1, 0xe8, 0x4c, 0x22, 0xfb, 0xa5, 0x18, 0x09,
                                  0x80, 0x85, 0x18, 0xaa, 0xa0, 0x00, 0xa5, 0x19, 0x8d, 0x05, 0x50, 0x8e, 0x04, 0x50, 0xb9, 0x98,
                                  0x03, 0x8d, 0x07, 0x50, 0xc8, 0xc0, 0x10, 0xf0, 0x08, 0xc0, 0x08, 0xd0, 0xf1, 0xe8, 0x4c, 0x46,
                                  0xfb, 0x68, 0xa8, 0x68, 0xaa, 0x68, 0x60, 0xa9, 0x19, 0x85, 0x1d, 0xa9, 0xff, 0x85, 0x1c, 0xa2,
                                  0x00, 0xa0, 0xe6, 0xa9, 0x00, 0x20, 0x00, 0xff, 0x60, 0x98, 0x48, 0x8a, 0x48, 0xa5, 0x12, 0x05,
                                  0x13, 0xd0, 0x06, 0xa9, 0xff, 0x85, 0x12, 0x85, 0x13, 0xa5, 0x13, 0x29, 0x04, 0x0a, 0x0a, 0x0a,
                                  0x0a, 0x0a, 0x85, 0x14, 0xa5, 0x12, 0x29, 0x10, 0x0a, 0x0a, 0x0a, 0x45, 0x14, 0x0a, 0x26, 0x12,
                                  0x26, 0x13, 0x68, 0xaa, 0x68, 0xa8, 0xa5, 0x12, 0x60, 0x20, 0x90, 0xf5, 0xa9, 0x00, 0x8d, 0x02,
                                  0x50, 0x8d, 0x03, 0x50, 0x8d, 0xe0, 0x00, 0x8d, 0xe1, 0x00, 0x8d, 0xe2, 0x00, 0x8d, 0xe5, 0x00,
                                  0x8d, 0xe6, 0x00, 0xa9, 0x70, 0x8d, 0xe3, 0x00, 0xa9, 0x80, 0x8d, 0xe7, 0x00, 0x20, 0xeb, 0xfb,
                                  0xad, 0xe1, 0x00, 0xae, 0xe0, 0x00, 0xa0, 0x00, 0x20, 0x42, 0xff, 0xa9, 0xa1, 0x85, 0x00, 0xa9,
                                  0x00, 0x85, 0x01, 0xa2, 0x10, 0xa0, 0x10, 0x20, 0x1d, 0xf3, 0x60, 0xa0, 0x00, 0xb1, 0xe2, 0x18,
                                  0x6d, 0xe0, 0x00, 0x8d, 0xe0, 0x00, 0xad, 0xe1, 0x00, 0x69, 0x00, 0x8d, 0xe1, 0x00, 0xc8, 0xd0,
                                  0xec, 0xee, 0xe3, 0x00, 0xad, 0xe3, 0x00, 0xcd, 0xe7, 0x00, 0xd0, 0xe1, 0x60, 0x78, 0xa9, 0x00,
                                  0x85, 0x0c, 0xa2, 0xff, 0x9a, 0x58, 0xd8, 0xa9, 0x00, 0x85, 0x0b, 0xa9, 0xff, 0x85, 0x12, 0x85,
                                  0x13, 0x20, 0x79, 0xfb, 0xa5, 0x0b, 0xf0, 0xf9, 0x4c, 0x2e, 0xfc, 0x4c, 0x39, 0xf0, 0xa9, 0x20,
                                  0x8d, 0x00, 0x59, 0xad, 0x00, 0x5a, 0x29, 0x01, 0xf0, 0x34, 0xad, 0x00, 0x5a, 0x29, 0x02, 0xf0,
                                  0x0f, 0x20, 0xc4, 0xfd, 0x58, 0xa2, 0xff, 0x9a, 0xa9, 0x00, 0x8d, 0x00, 0x59, 0x4c, 0x39, 0xf0,
                                  0xad, 0x02, 0x60, 0xc9, 0x01, 0xf0, 0xea, 0xa2, 0x00, 0xbd, 0x68, 0xfc, 0x9d, 0x00, 0x02, 0xe8,
                                  0xe0, 0x10, 0xd0, 0xf5, 0x78, 0x4c, 0x00, 0x02, 0xad, 0x00, 0x58, 0x6c, 0xfc, 0xff, 0xa9, 0x55,
                                  0x8d, 0x00, 0x44, 0xa5, 0x0b, 0x69, 0x3c, 0xc5, 0x0b, 0xd0, 0xfc, 0xa9, 0xaa, 0x8d, 0x00, 0x44,
                                  0x78, 0x4c, 0x00, 0xfd, 0x20, 0x63, 0xfd, 0x20, 0x9b, 0xfd, 0x58, 0xa5, 0x0b, 0x69, 0x32, 0xc5,
                                  0x0b, 0xd0, 0xfc, 0xa9, 0x00, 0x8d, 0x00, 0x59, 0xa9, 0x00, 0x8d, 0x00, 0x44, 0x4c, 0x98, 0xfc,
                                  0x5e, 0x08, 0x81, 0xe3, 0xf0, 0xff, 0x89, 0x46, 0x06, 0x33, 0xc0, 0x0b, 0xd8, 0x74, 0x08, 0xb8,
                                  0xff, 0xff, 0x83, 0xc4, 0x0a, 0x5d, 0xcb, 0xb9, 0x04, 0x00, 0x8b, 0x46, 0x08, 0x8b, 0x5e, 0x06,
                                  0xd1, 0xf8, 0xd1, 0xdb, 0xe2, 0xfa, 0x53, 0x89, 0x5e, 0x04, 0x9a, 0x9e, 0x04, 0xb1, 0x29, 0x8b,
                                  0xe5, 0x85, 0xc0, 0x74, 0x08, 0xb8, 0xff, 0xff, 0x83, 0xc4, 0x0a, 0x5d, 0xcb, 0x8b, 0x46, 0x08,
                                  0x8b, 0x5e, 0x06, 0x81, 0xe3, 0xf0, 0xff, 0xa3, 0x26, 0x00, 0x89, 0x1e, 0x24, 0x00, 0x33, 0xc0,
                                  0x33, 0xdb, 0xa3, 0x98, 0x14, 0x89, 0x1e, 0x96, 0x14, 0xa3, 0x90, 0x14, 0x89, 0x1e, 0x8e, 0x14,
                                  0xa2, 0x00, 0xa9, 0x55, 0x8d, 0x00, 0x02, 0x95, 0x00, 0xe8, 0xd0, 0xfb, 0xb5, 0x00, 0xcd, 0x00,
                                  0x02, 0xd0, 0x48, 0x49, 0xff, 0x95, 0x00, 0xe8, 0xd0, 0xf2, 0xad, 0x00, 0x02, 0x49, 0xff, 0x8d,
                                  0x00, 0x02, 0xc9, 0x55, 0xd0, 0xe6, 0xa9, 0x00, 0x85, 0xe2, 0xa9, 0x01, 0x85, 0xe3, 0xa0, 0x00,
                                  0xa9, 0x55, 0x85, 0xe4, 0x91, 0xe2, 0xc8, 0xd0, 0xfb, 0xb1, 0xe2, 0xc5, 0xe4, 0xd0, 0x1c, 0x49,
                                  0xff, 0x91, 0xe2, 0xc8, 0xd0, 0xf3, 0xa5, 0xe4, 0x49, 0xff, 0x85, 0xe4, 0xc9, 0x55, 0xd0, 0xe9,
                                  0xe6, 0xe3, 0xa5, 0xe3, 0xc9, 0x04, 0xd0, 0xd8, 0x4c, 0x84, 0xfc, 0xa9, 0xff, 0x8d, 0x00, 0x44,
                                  0x4c, 0x5b, 0xfd, 0xa9, 0x55, 0x85, 0xe4, 0xa9, 0x00, 0x85, 0xe8, 0x85, 0x0a, 0xa5, 0xe4, 0x8d,
                                  0x00, 0x44, 0xad, 0x00, 0x4c, 0xad, 0x00, 0x4c, 0xad, 0x00, 0x4c, 0xad, 0x00, 0x4c, 0xad, 0x00,
                                  0x4c, 0xad, 0x00, 0x4c, 0xad, 0x00, 0x4c, 0xad, 0x00, 0x4c, 0xa5, 0xe8, 0xf0, 0xfc, 0xa5, 0x0a,
                                  0xc5, 0xe4, 0xd0, 0xc7, 0x49, 0xff, 0xc9, 0x55, 0xd0, 0xcb, 0x60, 0xa9, 0x00, 0x85, 0xe0, 0x85,
                                  0xe1, 0x85, 0xe7, 0x85, 0xe2, 0xa9, 0x34, 0x85, 0xe5, 0xa9, 0xcb, 0x85, 0xe6, 0xa9, 0xf0, 0x85,
                                  0xe3, 0x20, 0x48, 0xfe, 0x60, 0x42, 0x49, 0x54, 0x20, 0x43, 0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41,
                                  0x54, 0x49, 0x4f, 0x4e, 0x78, 0xd8, 0xa2, 0x00, 0xbd, 0xb5, 0xfd, 0x85, 0x04, 0xa0, 0x09, 0x06,
                                  0x04, 0x2a, 0x2a, 0x2a, 0x8d, 0x00, 0x60, 0x88, 0xd0, 0xf5, 0xe8, 0xe0, 0x0f, 0xd0, 0xe9, 0xa2,
                                  0x00, 0xad, 0x00, 0x60, 0x4a, 0x4a, 0x26, 0x04, 0xe8, 0xe0, 0x08, 0xd0, 0xf4, 0xa5, 0x04, 0xc9,
                                  0x47, 0xd0, 0x07, 0x20, 0x01, 0xfe, 0x20, 0x2a, 0xfe, 0x60, 0xb9, 0x00, 0x60, 0xc8, 0x4c, 0xfa,
                                  0xfd, 0xa2, 0x00, 0xbd, 0x05, 0x60, 0xdd, 0x11, 0xfe, 0xd0, 0xef, 0xe8, 0xe0, 0x19, 0xd0, 0xf3,
                                  0x60, 0x43, 0x4f, 0x50, 0x59, 0x52, 0x49, 0x47, 0x48, 0x54, 0x20, 0x42, 0x49, 0x54, 0x20, 0x43,
                                  0x4f, 0x52, 0x50, 0x4f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0xa9, 0x70, 0x85, 0xe3, 0xa9, 0x00,
                                  0x85, 0xe2, 0x85, 0xe0, 0x85, 0xe1, 0xad, 0x00, 0x60, 0x85, 0xe5, 0xad, 0x01, 0x60, 0x85, 0xe6,
                                  0xa9, 0x80, 0x85, 0xe7, 0x20, 0x48, 0xfe, 0x60, 0xa0, 0x00, 0xb1, 0xe2, 0x18, 0x65, 0xe0, 0x85,
                                  0xe0, 0xa5, 0xe1, 0x69, 0x00, 0x85, 0xe1, 0xc8, 0xd0, 0xf0, 0xe6, 0xe3, 0xa5, 0xe3, 0xc5, 0xe7,
                                  0xd0, 0xe8, 0xa5, 0xe5, 0xc5, 0xe0, 0xd0, 0x07, 0xa5, 0xe6, 0xc5, 0xe1, 0xd0, 0x01, 0x60, 0x4c,
                                  0xfa, 0xfd, 0xb1, 0x29, 0xa3, 0xa0, 0x14, 0x89, 0x1e, 0x9e, 0x14, 0x33, 0xc0, 0x83, 0xc4, 0x02,
                                  0x5d, 0xcb, 0xb8, 0xf2, 0xff, 0x9a, 0x4a, 0x05, 0xb1, 0x29, 0x33, 0xc9, 0xba, 0x02, 0x00, 0x8b,
                                  0x46, 0x16, 0x8b, 0x5e, 0x14, 0x9a, 0xd0, 0x06, 0xb1, 0x29, 0x8e, 0xc0, 0x26, 0x8b, 0x0f, 0x49,
                                  0x49, 0x89, 0x4e, 0x0c, 0x8b, 0x0e, 0xa0, 0x14, 0x8b, 0x16, 0x9e, 0x14, 0x9a, 0xca, 0x05, 0xb1,
                                  0x29, 0x89, 0x46, 0x06, 0x89, 0x5e, 0x04, 0x74, 0x09, 0x33, 0xc0, 0x50, 0x0e, 0xe8, 0xf3, 0xfe,
                                  0x8b, 0xe5, 0xff, 0x76, 0x18, 0x0e, 0xe8, 0xea, 0xfe, 0x8b, 0xe5, 0x89, 0x46, 0x0a, 0x0b, 0xc3,
                                  0x89, 0x5e, 0x08, 0x74, 0x2f, 0x8b, 0x46, 0x18, 0x8b, 0x5e, 0x0c, 0x3b, 0xd8, 0x76, 0x03, 0x89,
                                  0x46, 0x0c, 0xff, 0x76, 0x0c, 0xff, 0x76, 0x16, 0xff, 0x76, 0x14, 0xff, 0x76, 0x0a, 0xff, 0x76,
                                  0x08, 0x9a, 0x2a, 0x04, 0xb1, 0x29, 0x8b, 0xe5, 0xff, 0x76, 0x16, 0xff, 0x76, 0x14, 0x0e, 0xe8,
                                  0x48, 0xa9, 0x00, 0x85, 0xa8, 0x68, 0x4c, 0x0f, 0xff, 0x48, 0xa9, 0x80, 0x85, 0xa8, 0x68, 0x85,
                                  0x1a, 0x84, 0x19, 0x8a, 0x4a, 0x4a, 0x4a, 0x05, 0xa8, 0x85, 0x18, 0xa9, 0x40, 0x05, 0x15, 0x8d,
                                  0x01, 0x50, 0xa5, 0x1c, 0x4a, 0x4a, 0x4a, 0xaa, 0xa5, 0x19, 0x8d, 0x05, 0x50, 0xa5, 0x18, 0x8d,
                                  0x04, 0x50, 0xa5, 0x1a, 0xa4, 0x1d, 0x8d, 0x07, 0x50, 0x88, 0xd0, 0xfa, 0xe6, 0x18, 0xca, 0xd0,
                                  0xe7, 0x60, 0x48, 0x29, 0x0f, 0x09, 0x30, 0x85, 0xa3, 0x68, 0x4a, 0x4a, 0x4a, 0x4a, 0x29, 0x0f,
                                  0x09, 0x30, 0x85, 0xa2, 0x8a, 0x29, 0x0f, 0x09, 0x30, 0x85, 0xa5, 0x8a, 0x4a, 0x4a, 0x4a, 0x4a,
                                  0x29, 0x0f, 0x09, 0x30, 0x85, 0xa4, 0xc0, 0xff, 0xd0, 0x09, 0xa0, 0x20, 0x84, 0xa6, 0x84, 0xa7,
                                  0x4c, 0x85, 0xff, 0x98, 0x29, 0x0f, 0x09, 0x30, 0x85, 0xa7, 0x98, 0x4a, 0x4a, 0x4a, 0x4a, 0x29,
                                  0x0f, 0x09, 0x30, 0x85, 0xa6, 0xa0, 0x00, 0xb9, 0xa2, 0x00, 0xc9, 0x30, 0xd0, 0x0a, 0xa9, 0x20,
                                  0x99, 0xa2, 0x00, 0xc8, 0xc0, 0x05, 0x90, 0xef, 0xa9, 0x06, 0x85, 0xa1, 0x60, 0x78, 0x08, 0x48,
                                  0x98, 0x48, 0xe6, 0x0b, 0xa0, 0x03, 0x18, 0xb9, 0x0e, 0x00, 0x69, 0x01, 0x99, 0x0e, 0x00, 0x90,
                                  0x03, 0x88, 0x10, 0xf2, 0xa5, 0x0c, 0xf0, 0x03, 0x20, 0x26, 0x60, 0x68, 0xa8, 0x68, 0x28, 0x58,
                                  0x40, 0x08, 0x48, 0xad, 0x00, 0x48, 0x85, 0x0a, 0xa9, 0xff, 0x85, 0xe8, 0xa5, 0x0c, 0xf0, 0x03,
                                  0x20, 0x23, 0x60, 0x68, 0x28, 0x40, 0x11, 0x26, 0x8b, 0x44, 0x0e, 0xa9, 0x80, 0x00, 0x74, 0x15,
                                  0x26, 0xf7, 0x44, 0x0e, 0x40, 0x00, 0x74, 0x0d, 0x06, 0x56, 0xb8, 0xff, 0xff, 0x50, 0x00, 0x00,
                                  0x00, 0x97, 0x3d, 0x8b, 0xe5, 0xc4, 0x76, 0x11, 0x26, 0x84, 0xc1, 0xff, 0x0d, 0xfc, 0x9d, 0xff
};

#define AUDIO_SAMPLE_RATE SV_SAMPLE_RATE
#define AUDIO_BUFFER_SIZE ((SV_SAMPLE_RATE / 60) << 1)

char __uninitialized_ram(filename[256]);
static uint32_t __uninitialized_ram(rom_size) = 0;

static FATFS fs;
bool reboot = false;
bool limit_fps = false;
semaphore vga_start_semaphore;

uint8_t SCREEN[150][160];

typedef struct __attribute__((__packed__)) {
    uint8_t version;
    bool swap_ab;
    bool aspect_ratio;
    uint8_t ghosting;
    uint8_t palette;
    uint8_t save_slot;
} SETTINGS;

SETTINGS settings = {
        .version = 1,
        .swap_ab = false,
        .aspect_ratio = false,
        .ghosting = 8,
        .palette = 0,
        .save_slot = 0,
};

struct input_bits_t {
    bool a: true;
    bool b: true;
    bool select: true;
    bool start: true;
    bool right: true;
    bool left: true;
    bool up: true;
    bool down: true;
};

static input_bits_t keyboard_bits = { false, false, false, false, false, false, false, false };
static input_bits_t gamepad1_bits = { false, false, false, false, false, false, false, false };
static input_bits_t gamepad2_bits = { false, false, false, false, false, false, false, false };

bool swap_ab = false;

void nespad_tick() {
    nespad_read();

    uint8_t controls_state = 0;

    if (settings.swap_ab) {
        gamepad1_bits.b = (nespad_state & DPAD_A) != 0;
        gamepad1_bits.a = (nespad_state & DPAD_B) != 0;
    } else {
        gamepad1_bits.a = (nespad_state & DPAD_A) != 0;
        gamepad1_bits.b = (nespad_state & DPAD_B) != 0;

    }

    gamepad1_bits.select = (nespad_state & DPAD_SELECT) != 0;
    gamepad1_bits.start = (nespad_state & DPAD_START) != 0;
    gamepad1_bits.up = (nespad_state & DPAD_UP) != 0;
    gamepad1_bits.down = (nespad_state & DPAD_DOWN) != 0;
    gamepad1_bits.left = (nespad_state & DPAD_LEFT) != 0;
    gamepad1_bits.right = (nespad_state & DPAD_RIGHT) != 0;


    if (gamepad1_bits.up || keyboard_bits.up ) controls_state|=0x08;
    if (gamepad1_bits.down  || keyboard_bits.down ) controls_state|=0x04;
    if (gamepad1_bits.left  || keyboard_bits.left ) controls_state|=0x02;
    if (gamepad1_bits.right  || keyboard_bits.right ) controls_state|=0x01;
    if (gamepad1_bits.a  || keyboard_bits.a ) controls_state|=0x20;
    if (gamepad1_bits.b  || keyboard_bits.b ) controls_state|=0x10;
    if (gamepad1_bits.start  || keyboard_bits.start ) controls_state|=0x80;
    if (gamepad1_bits.select  || keyboard_bits.select ) controls_state|=0x40;
    // if (gamepad1_bits.down) smsSystem|=INPUT_SOFT_RESET;
    // if (gamepad1_bits.down) smsSystem|=INPUT_HARD_RESET;
}

static bool isInReport(hid_keyboard_report_t const* report, const unsigned char keycode) {
    for (unsigned char i: report->keycode) {
        if (i == keycode) {
            return true;
        }
    }
    return false;
}

void
__not_in_flash_func(process_kbd_report)(hid_keyboard_report_t const* report, hid_keyboard_report_t const* prev_report) {
    /* printf("HID key report modifiers %2.2X report ", report->modifier);
    for (unsigned char i: report->keycode)
        printf("%2.2X", i);
    printf("\r\n");
     */
    keyboard_bits.start = isInReport(report, HID_KEY_ENTER);
    keyboard_bits.select = isInReport(report, HID_KEY_BACKSPACE) || isInReport(report, HID_KEY_ESCAPE);

    keyboard_bits.a = isInReport(report, HID_KEY_Z) || isInReport(report, HID_KEY_O);
    keyboard_bits.b = isInReport(report, HID_KEY_X) || isInReport(report, HID_KEY_P);

    keyboard_bits.up = isInReport(report, HID_KEY_ARROW_UP) || isInReport(report, HID_KEY_W);
    keyboard_bits.down = isInReport(report, HID_KEY_ARROW_DOWN) || isInReport(report, HID_KEY_S);
    keyboard_bits.left = isInReport(report, HID_KEY_ARROW_LEFT) || isInReport(report, HID_KEY_A);
    keyboard_bits.right = isInReport(report, HID_KEY_ARROW_RIGHT)  || isInReport(report, HID_KEY_D);
    //-------------------------------------------------------------------------
}

Ps2Kbd_Mrmltr ps2kbd(
    pio1,
    0,
    process_kbd_report);




uint_fast32_t frames = 0;
uint64_t start_time;


i2s_config_t i2s_config;
#define AUDIO_FREQ 44100


typedef struct __attribute__((__packed__)) {
    bool is_directory;
    bool is_executable;
    size_t size;
    char filename[79];
} file_item_t;

constexpr int max_files = 300;
file_item_t * fileItems = (file_item_t *)(&SCREEN[0][0] + TEXTMODE_COLS*TEXTMODE_ROWS*2);

int compareFileItems(const void* a, const void* b) {
    const auto* itemA = (file_item_t *)a;
    const auto* itemB = (file_item_t *)b;
    // Directories come first
    if (itemA->is_directory && !itemB->is_directory)
        return -1;
    if (!itemA->is_directory && itemB->is_directory)
        return 1;
    // Sort files alphabetically
    return strcmp(itemA->filename, itemB->filename);
}

bool isExecutable(const char pathname[255],const char *extensions) {
    char *pathCopy = strdup(pathname);
    const char* token = strrchr(pathCopy, '.');

    if (token == nullptr) {
        return false;
    }

    token++;

    while (token != NULL) {
        if (strstr(extensions, token) != NULL) {
            free(pathCopy);
            return true;
        }
        token = strtok(NULL, ",");
    }
    free(pathCopy);
    return false;
}

bool filebrowser_loadfile(const char pathname[256]) {
    UINT bytes_read = 0;
    FIL file;

    constexpr int window_y = (TEXTMODE_ROWS - 5) / 2;
    constexpr int window_x = (TEXTMODE_COLS - 43) / 2;

    draw_window("Loading ROM", window_x, window_y, 43, 5);

    FILINFO fileinfo;
    f_stat(pathname, &fileinfo);
    rom_size = fileinfo.fsize;
    if (16384 - 64 << 10 < fileinfo.fsize) {
        draw_text("ERROR: ROM too large! Canceled!!", window_x + 1, window_y + 2, 13, 1);
        sleep_ms(5000);
        return false;
    }


    draw_text("Loading...", window_x + 1, window_y + 2, 10, 1);
    sleep_ms(500);


    multicore_lockout_start_blocking();
    auto flash_target_offset = FLASH_TARGET_OFFSET;
    const uint32_t ints = save_and_disable_interrupts();
    flash_range_erase(flash_target_offset, fileinfo.fsize);
    restore_interrupts(ints);

    if (FR_OK == f_open(&file, pathname, FA_READ)) {
        uint8_t buffer[FLASH_PAGE_SIZE];

        do {
            f_read(&file, &buffer, FLASH_PAGE_SIZE, &bytes_read);

            if (bytes_read) {
                const uint32_t ints = save_and_disable_interrupts();
                flash_range_program(flash_target_offset, buffer, FLASH_PAGE_SIZE);
                restore_interrupts(ints);

                gpio_put(PICO_DEFAULT_LED_PIN, flash_target_offset >> 13 & 1);

                flash_target_offset += FLASH_PAGE_SIZE;
            }
        }
        while (bytes_read != 0);

        gpio_put(PICO_DEFAULT_LED_PIN, true);
    }
    f_close(&file);
    multicore_lockout_end_blocking();
    // restore_interrupts(ints);

    strcpy(filename, fileinfo.fname);

    return true;
}

void filebrowser(const char pathname[256], const char executables[11]) {
    bool debounce = true;
    char basepath[256];
    char tmp[TEXTMODE_COLS + 1];
    strcpy(basepath, pathname);
    constexpr int per_page = TEXTMODE_ROWS - 3;

    DIR dir;
    FILINFO fileInfo;

    if (FR_OK != f_mount(&fs, "SD", 1)) {
        draw_text("SD Card not inserted or SD Card error!", 0, 0, 12, 0);
        while (true);
    }

    while (true) {
        memset(fileItems, 0, sizeof(file_item_t) * max_files);
        int total_files = 0;

        snprintf(tmp, TEXTMODE_COLS, "SD:\\%s", basepath);
        draw_window(tmp, 0, 0, TEXTMODE_COLS, TEXTMODE_ROWS - 1);
        memset(tmp, ' ', TEXTMODE_COLS);


        draw_text(tmp, 0, 29, 0, 0);
        auto off = 0;
        draw_text("START", off, 29, 7, 0);
        off += 5;
        draw_text(" Run at cursor ", off, 29, 0, 3);
        off += 16;
        draw_text("SELECT", off, 29, 7, 0);
        off += 6;
        draw_text(" Run previous  ", off, 29, 0, 3);
#ifndef TFT
        off += 16;
        draw_text("ARROWS", off, 29, 7, 0);
        off += 6;
        draw_text(" Navigation    ", off, 29, 0, 3);
        off += 16;
        draw_text("A/F10", off, 29, 7, 0);
        off += 5;
        draw_text(" USB DRV ", off, 29, 0, 3);
#endif

        if (FR_OK != f_opendir(&dir, basepath)) {
            draw_text("Failed to open directory", 1, 1, 4, 0);
            while (true);
        }

        if (strlen(basepath) > 0) {
            strcpy(fileItems[total_files].filename, "..\0");
            fileItems[total_files].is_directory = true;
            fileItems[total_files].size = 0;
            total_files++;
        }

        while (f_readdir(&dir, &fileInfo) == FR_OK &&
               fileInfo.fname[0] != '\0' &&
               total_files < max_files
        ) {
            // Set the file item properties
            fileItems[total_files].is_directory = fileInfo.fattrib & AM_DIR;
            fileItems[total_files].size = fileInfo.fsize;
            fileItems[total_files].is_executable = isExecutable(fileInfo.fname, executables);
            strncpy(fileItems[total_files].filename, fileInfo.fname, 78);
            total_files++;
        }
        f_closedir(&dir);

        qsort(fileItems, total_files, sizeof(file_item_t), compareFileItems);

        if (total_files > max_files) {
            draw_text(" Too many files!! ", TEXTMODE_COLS - 17, 0, 12, 3);
        }

        int offset = 0;
        int current_item = 0;

        while (true) {
            sleep_ms(100);

            if (!debounce) {
                debounce = !(nespad_state & DPAD_START || keyboard_bits.start);
            }

            // ESCAPE
            if (nespad_state & DPAD_SELECT || keyboard_bits.select) {
                return;
            }

            if (nespad_state & DPAD_DOWN || keyboard_bits.down) {
                if (offset + (current_item + 1) < total_files) {
                    if (current_item + 1 < per_page) {
                        current_item++;
                    }
                    else {
                        offset++;
                    }
                }
            }

            if (nespad_state & DPAD_UP || keyboard_bits.up) {
                if (current_item > 0) {
                    current_item--;
                }
                else if (offset > 0) {
                    offset--;
                }
            }

            if (nespad_state & DPAD_RIGHT || keyboard_bits.right) {
                offset += per_page;
                if (offset + (current_item + 1) > total_files) {
                    offset = total_files - (current_item + 1);
                }
            }

            if (nespad_state & DPAD_LEFT || keyboard_bits.left) {
                if (offset > per_page) {
                    offset -= per_page;
                }
                else {
                    offset = 0;
                    current_item = 0;
                }
            }

            if (debounce && (nespad_state & DPAD_START || keyboard_bits.start)) {
                auto file_at_cursor = fileItems[offset + current_item];

                if (file_at_cursor.is_directory) {
                    if (strcmp(file_at_cursor.filename, "..") == 0) {
                        const char* lastBackslash = strrchr(basepath, '\\');
                        if (lastBackslash != nullptr) {
                            const size_t length = lastBackslash - basepath;
                            basepath[length] = '\0';
                        }
                    }
                    else {
                        sprintf(basepath, "%s\\%s", basepath, file_at_cursor.filename);
                    }
                    debounce = false;
                    break;
                }

                if (file_at_cursor.is_executable) {
                    sprintf(tmp, "%s\\%s", basepath, file_at_cursor.filename);

                    filebrowser_loadfile(tmp);
                    return;
                }
            }

            for (int i = 0; i < per_page; i++) {
                uint8_t color = 11;
                uint8_t bg_color = 1;

                if (offset + i < max_files) {
                    const auto item = fileItems[offset + i];


                    if (i == current_item) {
                        color = 0;
                        bg_color = 3;
                        memset(tmp, 0xCD, TEXTMODE_COLS - 2);
                        tmp[TEXTMODE_COLS - 2] = '\0';
                        draw_text(tmp, 1, per_page + 1, 11, 1);
                        snprintf(tmp, TEXTMODE_COLS - 2, " Size: %iKb, File %lu of %i ", item.size / 1024,
                                 offset + i + 1,
                                 total_files);
                        draw_text(tmp, 2, per_page + 1, 14, 3);
                    }

                    const auto len = strlen(item.filename);
                    color = item.is_directory ? 15 : color;
                    color = item.is_executable ? 10 : color;
                    //color = strstr((char *)rom_filename, item.filename) != nullptr ? 13 : color;

                    memset(tmp, ' ', TEXTMODE_COLS - 2);
                    tmp[TEXTMODE_COLS - 2] = '\0';
                    memcpy(&tmp, item.filename, len < TEXTMODE_COLS - 2 ? len : TEXTMODE_COLS - 2);
                }
                else {
                    memset(tmp, ' ', TEXTMODE_COLS - 2);
                }
                draw_text(tmp, 1, i + 1, color, bg_color);
            }
        }
    }
}

enum menu_type_e {
    NONE,
    INT,
    TEXT,
    ARRAY,

    SAVE,
    LOAD,
    ROM_SELECT,
    RETURN,
};

typedef bool (*menu_callback_t)();

typedef struct __attribute__((__packed__)) {
    const char* text;
    menu_type_e type;
    const void* value;
    menu_callback_t callback;
    uint8_t max_value;
    char value_list[45][20];
} MenuItem;

uint16_t frequencies[] = { 378, 396, 404, 408, 412, 416, 420, 424, 432 };
uint8_t frequency_index = 0;

bool overclock() {
    hw_set_bits(&vreg_and_chip_reset_hw->vreg, VREG_AND_CHIP_RESET_VREG_VSEL_BITS);
    sleep_ms(10);
    return set_sys_clock_khz(frequencies[frequency_index] * KHZ, true);
}

bool save() {
    char pathname[255];
#if 0
    const size_t size = supervision_save_state_buf_size();
    auto * data = (uint8_t *)(malloc(size));

    if (settings.save_slot > 0) {
        sprintf(pathname, "%s\\%s_%d.save",  HOME_DIR, filename, settings.save_slot);
    }
    else {
        sprintf(pathname, "%s\\%s.save",  HOME_DIR, filename);
    }

    FRESULT fr = f_mount(&fs, "", 1);
    FIL fd;
    fr = f_open(&fd, pathname, FA_CREATE_ALWAYS | FA_WRITE);
    UINT bytes_writen;

    supervision_save_state_buf((uint8*)data, (uint32)size);
    f_write(&fd, data, size, &bytes_writen);
    f_close(&fd);
    free(data);
#endif
    return true;
}

bool load() {
    char pathname[255];
#if 0
    const size_t size = supervision_save_state_buf_size();
    auto * data = (uint8_t *)(malloc(size));

    if (settings.save_slot > 0) {
        sprintf(pathname, "%s\\%s_%d.save",  HOME_DIR, filename, settings.save_slot);
    }
    else {
        sprintf(pathname, "%s\\%s.save",  HOME_DIR, filename);
    }

    FRESULT fr = f_mount(&fs, "", 1);
    FIL fd;
    fr = f_open(&fd, pathname, FA_READ);
    UINT bytes_read;

    f_read(&fd, data, size, &bytes_read);
    supervision_load_state_buf((uint8*)data, (uint32)size);
    f_close(&fd);

    free(data);
#endif
    return true;
}




void load_config() {
    FIL file;
    char pathname[256];
    sprintf(pathname, "%s\\emulator.cfg", HOME_DIR);

    if (FR_OK == f_mount(&fs, "", 1) && FR_OK == f_open(&file, pathname, FA_READ)) {
        UINT bytes_read;
        f_read(&file, &settings, sizeof(settings), &bytes_read);
        f_close(&file);
    }
}

void save_config() {
    FIL file;
    char pathname[256];
    sprintf(pathname, "%s\\emulator.cfg", HOME_DIR);

    if (FR_OK == f_mount(&fs, "", 1) && FR_OK == f_open(&file, pathname, FA_CREATE_ALWAYS | FA_WRITE)) {
        UINT bytes_writen;
        f_write(&file, &settings, sizeof(settings), &bytes_writen);
        f_close(&file);
    }
}
#if SOFTTV
typedef struct tv_out_mode_t {
    // double color_freq;
    float color_index;
    COLOR_FREQ_t c_freq;
    enum graphics_mode_t mode_bpp;
    g_out_TV_t tv_system;
    NUM_TV_LINES_t N_lines;
    bool cb_sync_PI_shift_lines;
    bool cb_sync_PI_shift_half_frame;
} tv_out_mode_t;
extern tv_out_mode_t tv_out_mode;

bool color_mode=true;
bool toggle_color() {
    color_mode=!color_mode;
    if(color_mode) {
        tv_out_mode.color_index= 1.0f;
    } else {
        tv_out_mode.color_index= 0.0f;
    }

    return true;
}
#endif
const MenuItem menu_items[] = {
        {"Swap AB <> BA: %s",     ARRAY, &settings.swap_ab,  nullptr, 1, {"NO ",       "YES"}},
        {},
//        { "Ghosting pix: %i ", INT, &settings.ghosting, nullptr, 8 },
        { "Palette: %s ", ARRAY, &settings.palette, nullptr, count_of(palettes)-1, {
                  "DEFAULT          "
                , "BLACK & WHITE    "
                , "AMBER            "
                , "GREEN            "
                , "BLUE             "
                , "BGB              "
                , "WATAROO          "
                , "GB_DMG           "
                , "GB_POCKET        "
                , "GB_LIGHT         "
                , "BLOSSOM_PINK     "
                , "BUBBLES_BLUE     "
                , "BUTTERCUP_GREEN  "
                , "DIGIVICE         "
                , "GAME_COM         "
                , "GAMEKING         "
                , "GAME_MASTER      "
                , "GOLDEN_WILD      "
                , "GREENSCALE       "
                , "HOKAGE_ORANGE    "
                , "LABO_FAWN        "
                , "SUPER_SAIYAN     "
                , "MICROVISION      "
                , "MILLION_LIVE_GOLD"
                , "ODYSSEY_GOLD     "
                , "SHINY_SKY_BLUE   "
                , "SLIME_BLUE       "
                , "TI_83            "
                , "TRAVEL_WOOD      "
                , "VIRTUAL_BOY      "
                , "TV-LINK          "
         }},
#if VGA
        { "Keep aspect ratio: %s",     ARRAY, &settings.aspect_ratio,  nullptr, 1, {"NO ",       "YES"}},
#endif
#if SOFTTV
        { "" },
        { "TV system %s", ARRAY, &tv_out_mode.tv_system, nullptr, 1, { "PAL ", "NTSC" } },
        { "TV Lines %s", ARRAY, &tv_out_mode.N_lines, nullptr, 3, { "624", "625", "524", "525" } },
        { "Freq %s", ARRAY, &tv_out_mode.c_freq, nullptr, 1, { "3.579545", "4.433619" } },
        { "Colors: %s", ARRAY, &color_mode, &toggle_color, 1, { "NO ", "YES" } },
        { "Shift lines %s", ARRAY, &tv_out_mode.cb_sync_PI_shift_lines, nullptr, 1, { "NO ", "YES" } },
        { "Shift half frame %s", ARRAY, &tv_out_mode.cb_sync_PI_shift_half_frame, nullptr, 1, { "NO ", "YES" } },
#endif
    //{ "Player 1: %s",        ARRAY, &player_1_input, 2, { "Keyboard ", "Gamepad 1", "Gamepad 2" }},
    //{ "Player 2: %s",        ARRAY, &player_2_input, 2, { "Keyboard ", "Gamepad 1", "Gamepad 2" }},
    {},
    { "Save state: %i", INT, &settings.save_slot, &save, 5 },
    { "Load state: %i", INT, &settings.save_slot, &load, 5 },
{},
{
    "Overclocking: %s MHz", ARRAY, &frequency_index, &overclock, count_of(frequencies) - 1,
    { "378", "396", "404", "408", "412", "416", "420", "424", "432" }
},
{ "Press START / Enter to apply", NONE },
    { "Reset to ROM select", ROM_SELECT },
    { "Return to game", RETURN }
};
#define MENU_ITEMS_NUMBER (sizeof(menu_items) / sizeof (MenuItem))

static inline void update_palette() {
    for (int i =0; i < 4; i++) {
        graphics_set_palette(i,RGB888(
                                     palettes[settings.palette][3*i+0],
                                     palettes[settings.palette][3*i+1],
                                     palettes[settings.palette][3*i+2]
                             )
        );
    }
}


void menu() {
    bool exit = false;
    graphics_set_mode(TEXTMODE_DEFAULT);
    char footer[TEXTMODE_COLS];
    snprintf(footer, TEXTMODE_COLS, ":: %s ::", PICO_PROGRAM_NAME);
    draw_text(footer, TEXTMODE_COLS / 2 - strlen(footer) / 2, 0, 11, 1);
    snprintf(footer, TEXTMODE_COLS, ":: %s build %s %s ::", PICO_PROGRAM_VERSION_STRING, __DATE__,
             __TIME__);
    draw_text(footer, TEXTMODE_COLS / 2 - strlen(footer) / 2, TEXTMODE_ROWS - 1, 11, 1);
    uint current_item = 0;

    while (!exit) {
        for (int i = 0; i < MENU_ITEMS_NUMBER; i++) {
            uint8_t y = i + (TEXTMODE_ROWS - MENU_ITEMS_NUMBER >> 1);
            uint8_t x = TEXTMODE_COLS / 2 - 10;
            uint8_t color = 0xFF;
            uint8_t bg_color = 0x00;
            if (current_item == i) {
                color = 0x01;
                bg_color = 0xFF;
            }
            const MenuItem* item = &menu_items[i];
            if (i == current_item) {
                switch (item->type) {
                    case INT:
                    case ARRAY:
                        if (item->max_value != 0) {
                            auto* value = (uint8_t *)item->value;
                            if ((gamepad1_bits.right || keyboard_bits.right) && *value < item->max_value) {
                                (*value)++;
                            }
                            if ((gamepad1_bits.left || keyboard_bits.left) && *value > 0) {
                                (*value)--;
                            }
                        }
                        break;
                    case RETURN:
                        if (gamepad1_bits.start || keyboard_bits.start)
                            exit = true;
                        break;

                    case ROM_SELECT:
                        if (gamepad1_bits.start || keyboard_bits.start) {
                            reboot = true;
                            return;
                        }
                        break;
                    default:
                        break;
                }

                if (nullptr != item->callback && (gamepad1_bits.start || keyboard_bits.start)) {
                    exit = item->callback();
                }
            }
            static char result[TEXTMODE_COLS];
            switch (item->type) {
                case INT:
                    snprintf(result, TEXTMODE_COLS, item->text, *(uint8_t *)item->value);
                    break;
                case ARRAY:
                    snprintf(result, TEXTMODE_COLS, item->text, item->value_list[*(uint8_t *)item->value]);
                    break;
                case TEXT:
                    snprintf(result, TEXTMODE_COLS, item->text, item->value);
                    break;
                case NONE:
                    color = 6;
                default:
                    snprintf(result, TEXTMODE_COLS, "%s", item->text);
            }
            draw_text(result, x, y, color, bg_color);
        }

        if (gamepad1_bits.b || (keyboard_bits.select && !keyboard_bits.start))
            exit = true;

        if (gamepad1_bits.down || keyboard_bits.down) {
            current_item = (current_item + 1) % MENU_ITEMS_NUMBER;

            if (menu_items[current_item].type == NONE)
                current_item++;
        }
        if (gamepad1_bits.up || keyboard_bits.up) {
            current_item = (current_item - 1 + MENU_ITEMS_NUMBER) % MENU_ITEMS_NUMBER;

            if (menu_items[current_item].type == NONE)
                current_item--;
        }

        sleep_ms(125);
    }

#if VGA
    if (settings.aspect_ratio) {
        graphics_set_offset(80, 40);
        graphics_set_mode(GRAPHICSMODE_ASPECT);
    } else {
        graphics_set_offset(0, 0);
        graphics_set_mode(GRAPHICSMODE_DEFAULT);
    }
#else
    graphics_set_mode(GRAPHICSMODE_DEFAULT);
#endif
    update_palette();
    save_config();
}


#define AUDIO_FREQ 44100
#define AUDIO_BUFFER_LENGTH ((AUDIO_FREQ /60 +1) * 2)
static int16_t audio_buffer[AUDIO_BUFFER_LENGTH] = { 0 };

/* Renderer loop on Pico's second core */
void __time_critical_func(render_core)() {
    multicore_lockout_victim_init();

    ps2kbd.init_gpio();
    nespad_begin(clock_get_hz(clk_sys) / 1000, NES_GPIO_CLK, NES_GPIO_DATA, NES_GPIO_LAT);

    graphics_init();

#ifndef HWAY
    i2s_config = i2s_get_default_config();
    i2s_config.sample_freq = AUDIO_FREQ;
    i2s_config.dma_trans_count = 1 + (AUDIO_FREQ / 60);
    i2s_volume(&i2s_config, 0);
    i2s_init(&i2s_config);
/* Typical AY-3-8910 configuration */
    PSG_init(&psg, 4'433'000 / 4, AUDIO_FREQ);
    PSG_setVolumeMode(&psg, 2); // AY style
    PSG_reset(&psg);

    psg.stereo_mask[0] = 0x01;
    psg.stereo_mask[1] = 0x03;
    psg.stereo_mask[2] = 0x02;
#else
    InitAY();
#endif

    const auto buffer = (uint8_t *)SCREEN;
    graphics_set_buffer(buffer, 160, 150);
    graphics_set_textbuffer(buffer);
    graphics_set_bgcolor(0x000000);
#if VGA
    graphics_set_offset(0, 0);
#else
    graphics_set_offset(80, 40);
#endif
    graphics_set_flashmode(false, false);
    sem_acquire_blocking(&vga_start_semaphore);

    // 60 FPS loop
    #define frame_tick (16666)
    uint64_t tick = time_us_64();
    uint64_t last_frame_tick = tick, last_sound_tick = tick;

    while (true) {

        if (tick >= last_frame_tick + frame_tick) {
#ifdef TFT
            refresh_lcd();
#endif
            ps2kbd.tick();
            nespad_tick();

            last_frame_tick = tick;
        }

#ifndef HWAY
        if (tick >= last_sound_tick + (1000000 / AUDIO_FREQ)) {
            PSG_calc_stereo(&psg, audio_buffer, AUDIO_BUFFER_LENGTH);
            i2s_dma_write(&i2s_config, audio_buffer);
            last_sound_tick = tick;
        }
#endif
        tick = time_us_64();

        // tuh_task();
        // hid_app_task();
        tight_loop_contents();
    }

    __unreachable();
}

int frame, frame_cnt = 0;
int frame_timer_start = 0;


static M6502 cpu;
static int bank0_offset = 0;
static int bank1_offset = 0x4000;
static uint8_t protection = 0;

extern "C" uint8_t __time_critical_func(Rd6502)(uint16_t address) {

    if (address <= 0x1FFF) {
        return RAM[address & 1023];
    }

    if (address >= 0x6000 && address <= 0x9FFF) {
        if (protection < 8) {
            return ((0x47 >> (7 - protection++)) & 1) << 1;
        }

        return ROM[bank0_offset + (address - 0x6000)];
    }

    if (address >= 0xA000 && address <= 0xDFFF) {
        return ROM[bank1_offset + (address - 0xA000)];
    }

    if (address >= 0x5000 && address <= 0x53FF) {
        if ((address & 7) == 6)
            return vram_r();
        exit(1);
    }

    if (address >= 0x5A00 && address <= 0x5AFF) {
        return 0b11;
    }

    // INPUT
    if (address == 0x4400) {
        uint8_t buttons = 0xff;
        if (gamepad1_bits.up) buttons ^= 0b1;
        if (gamepad1_bits.down) buttons ^= 0b10;
        if (gamepad1_bits.left) buttons ^= 0b100;
        if (gamepad1_bits.right) buttons ^= 0b1000;
        if (gamepad1_bits.a) buttons ^= 0b10000;
        if (gamepad1_bits.b) buttons ^= 0b100000;
        if (gamepad1_bits.start) buttons ^= 0b1000000;
        if (gamepad1_bits.select) buttons ^= 0b10000000;
        return buttons;
    }

    if (address == 0x4800) {
        return 0;

    }

    // BIOS
    if (address >= 0xE000) {
        return BIOS[(address - 0xE000) & 4095];
    }

//    printf("READ >>>>>>>>> WTF %04x %04x\r\n", address, m6502_registers.PC);
    return 0xFF;
}

extern "C" void __time_critical_func(Wr6502)(uint16_t address, uint8_t value) {
    if (address <= 0x1FFF) {
        RAM[address & 1023] = value;
        return;
    }

    if (address >= 0x4000 && address <= 0x43FF) {
#ifndef HWAY
        PSG_writeReg(&psg, address - 0x4000, value);
#else
        WriteAY(address - 0x4000, value);
#endif
        return;
    }

    if (address >= 0x5000 && address <= 0x53FF) {
        switch (address & 7) {
            case 1:
                return lcdcon_w(value);
            case 2:
                return xscroll_w(value);
            case 3:
                return yscroll_w(value);
            case 4:
                return xpos_w(value);
            case 5:
                return ypos_w(value);
            case 7:
                return vram_w(value);
        }
        exit(-1);
    }

    if (address >= 0x5900 && address <= 0x59FF) {
        return;
    }

    // 4in1 mapper switch first 16kb
    if (address >= 0x8000 && address <= 0x9FFF) {
        bank0_offset = 0x4000 * value;
        return;
    }

    // regular mapper switch second 16kb
    if (address >= 0xC000 && address <= 0xDFFF) {
        bank1_offset = 0x4000 * value;
        return;
    }

    //printf("WRITE >>>>>>>>> WTF %04x\r\n", address);
//    exit(1);
}

byte Loop6502(M6502 *R) {
    return INT_QUIT;
}

extern uint8_t VRAM[16384];
int __time_critical_func(main)() {
    overclock();

    sem_init(&vga_start_semaphore, 0, 1);
    multicore_launch_core1(render_core);
    sem_release(&vga_start_semaphore);


    gpio_init(PICO_DEFAULT_LED_PIN);
    gpio_set_dir(PICO_DEFAULT_LED_PIN, GPIO_OUT);

    for (int i = 0; i < 6; i++) {
        sleep_ms(33);
        gpio_put(PICO_DEFAULT_LED_PIN, true);
        sleep_ms(33);
        gpio_put(PICO_DEFAULT_LED_PIN, false);
    }

    load_config();
    update_palette();

    while (true) {
        graphics_set_mode(TEXTMODE_DEFAULT);
        filebrowser(HOME_DIR, "bin");
        graphics_set_buffer((uint8_t *)SCREEN, 160, 150);

#if VGA
        if (settings.aspect_ratio) {
            graphics_set_offset(80, 40);
            graphics_set_mode(GRAPHICSMODE_ASPECT);
        } else {
            graphics_set_offset(0, 0);
            graphics_set_mode(GRAPHICSMODE_DEFAULT);
        }
#else
        settings.aspect_ratio = false;
        graphics_set_mode(GRAPHICSMODE_DEFAULT);
#endif

        start_time = time_us_64();
        memset(RAM, 0xFF, sizeof(RAM));
        memset(VRAM, 0x0, sizeof(VRAM));

        bank0_offset = 0;
        bank1_offset = 0x4000;
        protection = 0;

        Reset6502(&cpu);
        cpu.IPeriod = 128;
        int cycles, irqCycles = 0;

        while (!reboot) {
            Run6502(&cpu);
            irqCycles += 128;
            cycles += 128;

            if ((gamepad1_bits.start && gamepad1_bits.select) || (keyboard_bits.start && keyboard_bits.select)) {
                menu();
            }

            if (irqCycles >= 32768) {
                Int6502(&cpu, INT_IRQ);
                irqCycles = 0;
            }

            if (cycles >= 72900) {
                screen_update((uint8_t *) SCREEN);
//                if (mfb_update(SCREEN, 60) == -1)
//                    exit(1);
                frame++;

                if (0) {

                    frame_cnt++;
                    if (frame_cnt == 6) {
                        while (time_us_64() - frame_timer_start < 16666 * 6);  // 60 Hz
                        frame_timer_start = time_us_64();
                        frame_cnt = 0;
                    }
                }
                cycles = 0;
            }


            tight_loop_contents();
/*            // process audio
            auto * ptr = (unsigned short *)audio_buffer;
            for (unsigned char i : buffer)
                *ptr++ = i << (8 + 1);

            i2s_dma_write(&i2s_config, (const int16_t *) audio_buffer);*/
        }

        reboot = false;
    }
    __unreachable();
}
